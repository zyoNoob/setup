#!/bin/zsh

# Exit on error
set -e

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check for required commands
for cmd in git gum gh mods; do
    if ! command_exists "$cmd"; then
        echo "Error: $cmd is not installed."
        exit 1
    fi
done

# Get the default branch from the remote repository
get_default_branch() {
    # Attempt to get default branch from remote, fallback to local main/master
    local branch
    branch=$(git remote show origin 2>/dev/null | grep 'HEAD branch' | cut -d' ' -f5)

    if [ -z "$branch" ] || [ "$branch" = "(unknown)" ]; then
        gum style --foreground "yellow" "Warning: Could not determine default branch from remote HEAD. Checking local 'main' or 'master'."
        if git show-ref --verify --quiet refs/heads/main; then
            branch="main"
        elif git show-ref --verify --quiet refs/heads/master; then
            branch="master"
        else
            gum style --foreground "red" "Error: Could not determine the default branch. Please ensure 'main' or 'master' exists locally, or the remote HEAD branch is set."
            exit 1
        fi
        gum style --foreground "yellow" "Using '$branch' as fallback default branch."
    fi
    echo "$branch"
}

# Generate PR title and body
generate_pr_info() {
    local default_branch
    default_branch=$(get_default_branch)
    if [ -z "$default_branch" ]; then
        # Error message already printed by get_default_branch
        exit 1
    fi

    gum style --foreground 212 "Using default branch: $default_branch"

    # Check for changes against the default branch
    if git diff --quiet "$default_branch"..; then
        gum style --foreground "yellow" "No changes detected compared to '$default_branch'. Nothing to ship."
        exit 0
    fi

    local type scope pr_title_prefix pr_summary pr_body MAX_TOTAL_TITLE_LENGTH max_summary_length
    MAX_TOTAL_TITLE_LENGTH=100 # Max length for the entire PR title (prefix + summary)

    # Using the Conventional Commit format
    type=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert" --header "Select PR Type:")
    if [ -z "$type" ]; then
        gum style --foreground "red" "PR Type selection cancelled or failed."
        exit 1
    fi

    scope=$(gum input --placeholder "scope (optional, e.g., 'api', 'ui')" --prompt "Enter scope: ")

    # Since the scope is optional, wrap it in parentheses if it has a value.
    [ -n "$scope" ] && scope="($scope)"

    pr_title_prefix="$type$scope"

    # Calculate remaining length for the summary
    local prefix_len=${#pr_title_prefix}
    # prefix + ": " + summary <= MAX_TOTAL_TITLE_LENGTH
    max_summary_length=$((MAX_TOTAL_TITLE_LENGTH - prefix_len - 2)) # -2 for ": "

    if [ "$max_summary_length" -lt 15 ]; then # Ensure there's reasonable space for a summary
        gum style --foreground "red" "Error: Prefix '$pr_title_prefix' is too long (length: $prefix_len). Leaves only $max_summary_length chars for summary (max total title length: $MAX_TOTAL_TITLE_LENGTH)."
        exit 1
    fi

    gum style --foreground 212 "Generating Pull Request summary (max length for summary: $max_summary_length chars)..."
    local title_prompt
    title_prompt="Generate a concise and descriptive Pull Request summary based on the git diff. The summary should:
- Be a single line.
- Start with a lowercase letter.
- NOT include any prefix like 'fix:', 'feat:', etc. (this will be added automatically).
- Be ideally around 50 characters, and strictly not exceed $max_summary_length characters.
- Clearly summarize the main purpose of the changes."

    pr_summary=$(git diff "$default_branch".. | mods --temp 0.2 "$title_prompt")
    
    # Clean and truncate pr_summary
    pr_summary=$(echo "$pr_summary" | head -n 1) # Take first line in case mods returns multiple
    pr_summary=$(echo "$pr_summary" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//') # Trim whitespace

    if [ ${#pr_summary} -gt "$max_summary_length" ]; then
        gum style --foreground "yellow" "Warning: Generated summary (length ${#pr_summary}) exceeded $max_summary_length chars. Truncating."
        pr_summary=$(echo "$pr_summary" | cut -c1-"$max_summary_length")
        pr_summary=$(echo "$pr_summary" | sed -e 's/[[:space:]]*$//') # Re-trim trailing space if cut left any
    fi

    if [ -z "$pr_summary" ]; then
        gum style --foreground "red" "Error: Failed to generate PR summary, or summary is empty after processing."
        exit 1
    fi

    local pr_title="$pr_title_prefix: $pr_summary"

    gum style --foreground 212 "Generating Pull Request body..."
    local body_prompt
    body_prompt="Generate a structured Pull Request body in Markdown format based on the git diff. The body should include the following sections if applicable:

### Overview
A brief summary explaining the purpose and context of these changes.

### Key Changes
- Use bullet points to list the main modifications.
- Be specific about what was added, removed, or changed.

### Reasoning
Explain why these changes were necessary or beneficial.

### Testing Notes (Optional)
Provide brief instructions or notes on how these changes can be tested. If no specific testing steps are needed, this section can be omitted or state 'N/A'.

General instructions for the entire body:
- Ensure clear and concise language.
- Do NOT start the entire body with markdown code block fences like '''markdown or '''.
- Do NOT include the PR type (e.g., 'fix:', 'feat:') at the beginning of the body.
- Adhere to a maximum token limit of around 1800 tokens for this body content."

    pr_body=$(git diff "$default_branch".. | mods -f --temp 0.2 "$body_prompt" --max-tokens 2000)

    if [ -z "$pr_body" ] || echo "$pr_body" | grep -q '^[[:space:]]*$'; then # Check if empty or only whitespace
        gum style --foreground "yellow" "Warning: Initial PR body generation failed or resulted in empty content. Attempting fallback..."
        # Fallback prompt is simpler
        local fallback_body_prompt="Summarize the following code changes for a Pull Request body.
Explain what was changed and why. Use Markdown format. Be concise and clear."
        pr_body=$(git diff "$default_branch".. | mods -f --temp 0.2 "$fallback_body_prompt" --max-tokens 1000)
        if [ -z "$pr_body" ] || echo "$pr_body" | grep -q '^[[:space:]]*$'; then
            gum style --foreground "red" "Error: Fallback PR body generation also failed or resulted in empty content. Please create the PR manually."
            exit 1
        fi
    fi
    
    # Clean up pr_body: remove potential leading/trailing ```markdown or ``` if they wrap the whole content
    # and trim leading/trailing blank lines from the whole block.
    if [[ "$pr_body" == \`\`\`* ]] && [[ "$pr_body" == *\`\`\` ]]; then
        temp_body=$(echo "$pr_body" | sed -E 's/^```(markdown|text|diff)?\s*//' | sed -E 's/\s*```$//')
        # Only apply if stripping actually changes something and leaves content
        if [ "$temp_body" != "$pr_body" ] && [ -n "$temp_body" ]; then
            pr_body="$temp_body"
        fi
    fi
    pr_body=$(echo "$pr_body" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')


    if echo "$pr_body" | grep -qv '[^[:space:]]'; then # Final check if body is all whitespace
        gum style --foreground "red" "Error: PR body is empty or contains only whitespace after all processing."
        exit 1
    fi

    gum style --foreground "cyan" --border double --padding "1 1" --margin "1 1" \
        "Generated Pull Request Details:" \
        "Title: $pr_title" \
        "--- Body Preview (scroll if needed) ---"
    
    echo "$pr_body" | gum format # Display body using gum format for better readability

    if ! gum confirm "Proceed with creating Pull Request with the above title and body?"; then
        gum style --foreground "yellow" "PR creation aborted by user."
        exit 0
    fi

    gum style --foreground "magenta" "Creating Pull Request on GitHub..."
    gh pr create \
        --title "$pr_title" \
        --body "$pr_body"
    
    gum style --foreground "green" "Pull Request created successfully!"
}

# Main script execution starts here
generate_pr_info
